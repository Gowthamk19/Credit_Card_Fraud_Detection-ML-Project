# -*- coding: utf-8 -*-
"""CreditCardFraudDetection.ipynb

Automatically generated by Colab.
Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split

credit_card_data=pd.read_csv('/content/creditcard.csv')

credit_card_data.head()

credit_card_data['Class'].value_counts()

credit_card_data.tail()

# To know the dataset informations
credit_card_data.info()

credit_card_data.shape

credit_card_data.isnull().sum()

credit_card_data['Class'].value_counts()

"""Unbalance dataset --> It has high legal transaction and Low fraud transaction

0 --> Legal transaction

1 --> Fraud transaction
"""

# Distribution of legal and fraudlant transaction
legal = credit_card_data[credit_card_data.Class == 0]
fraud = credit_card_data[credit_card_data.Class == 1]

print(legal.shape)
print(fraud.shape)

legal.Amount.describe()

fraud.Amount.describe()

#To compare the values of both transaction
credit_card_data.groupby('Class').mean()

"""Take a sample 492 data in legal and add it in fraud dataset"""

# Make 492 data seperate from legal data
legal_sample=legal.sample(n=492)

"""Concat the dataset"""

#set axis=0 to add data one by one
new_dataset = pd.concat([legal_sample,fraud],axis=0)

new_dataset.head()

new_dataset.tail()

new_dataset['Class'].value_counts()

new_dataset.groupby('Class').mean()

"""Splitting the dataset"""

X = new_dataset.drop(columns = 'Class', axis=1)
Y = new_dataset['Class']

print(X)

print(Y)

"""Split the data into training data and testing data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, stratify = Y, random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""Model Training

Logistic Regression
"""

model = LogisticRegression()

#Trainig the Logistic regressionn with training data
model.fit(X_train, Y_train)

"""Model Evaluation"""

# accuracy of training data
X_train_prediction = model.predict(X_train)
train_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print("Accuracy Of Traiinig Data: ",train_data_accuracy )

# accuracy of training data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print("Accuracy Of Testing Data: ",test_data_accuracy)

input_data=(0,-1.3598071336738,-0.0727811733098497,2.53634673796914,1.37815522427443,-0.338320769942518,0.462387777762292,0.239598554061257,0.0986979012610507,0.363786969611213,0.0907941719789316,-0.551599533260813,-0.617800855762348,-0.991389847235408,-0.311169353699879,1.46817697209427,-0.470400525259478,0.207971241929242,0.0257905801985591,0.403992960255733,0.251412098239705,-0.018306777944153,0.277837575558899,-0.110473910188767,0.0669280749146731,0.128539358273528,-0.189114843888824,0.133558376740387,-0.0210530534538215,149.62)
#changing the input data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the numpy array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if(prediction[0]==0):
  print("It's a Non- Fraud.")
else:
  print("It's a Fraud.")

